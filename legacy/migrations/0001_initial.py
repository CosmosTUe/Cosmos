# Generated by Django 3.0.8 on 2020-07-21 18:11

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AuthGroup",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=150, unique=True)),
            ],
            options={"db_table": "auth_group", "managed": True},
        ),
        migrations.CreateModel(
            name="AuthUser",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("is_superuser", models.IntegerField()),
                ("username", models.CharField(max_length=150, unique=True)),
                ("first_name", models.CharField(max_length=30)),
                ("last_name", models.CharField(max_length=150)),
                ("email", models.CharField(max_length=254)),
                ("is_staff", models.IntegerField()),
                ("is_active", models.IntegerField()),
                ("date_joined", models.DateTimeField()),
            ],
            options={"db_table": "auth_user", "managed": True},
        ),
        migrations.CreateModel(
            name="CmsCmsplugin",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("position", models.PositiveSmallIntegerField()),
                ("language", models.CharField(max_length=15)),
                ("plugin_type", models.CharField(max_length=50)),
                ("creation_date", models.DateTimeField()),
                ("changed_date", models.DateTimeField()),
                ("depth", models.PositiveIntegerField()),
                ("numchild", models.PositiveIntegerField()),
                ("path", models.CharField(max_length=255, unique=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.CmsCmsplugin"
                    ),
                ),
            ],
            options={"db_table": "cms_cmsplugin", "managed": True},
        ),
        migrations.CreateModel(
            name="CmsPage",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_by", models.CharField(max_length=255)),
                ("changed_by", models.CharField(max_length=255)),
                ("creation_date", models.DateTimeField()),
                ("changed_date", models.DateTimeField()),
                ("publication_date", models.DateTimeField(blank=True, null=True)),
                ("publication_end_date", models.DateTimeField(blank=True, null=True)),
                ("in_navigation", models.IntegerField()),
                ("soft_root", models.IntegerField()),
                ("reverse_id", models.CharField(blank=True, max_length=40, null=True)),
                ("navigation_extenders", models.CharField(blank=True, max_length=80, null=True)),
                ("template", models.CharField(max_length=100)),
                ("login_required", models.IntegerField()),
                ("limit_visibility_in_menu", models.SmallIntegerField(blank=True, null=True)),
                ("is_home", models.IntegerField()),
                ("application_urls", models.CharField(blank=True, max_length=200, null=True)),
                ("application_namespace", models.CharField(blank=True, max_length=200, null=True)),
                ("publisher_is_draft", models.IntegerField()),
                ("languages", models.CharField(blank=True, max_length=255, null=True)),
                ("xframe_options", models.IntegerField()),
                ("is_page_type", models.IntegerField()),
            ],
            options={"db_table": "cms_page", "managed": True},
        ),
        migrations.CreateModel(
            name="CmsPlaceholder",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slot", models.CharField(max_length=255)),
                ("default_width", models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
            options={"db_table": "cms_placeholder", "managed": True},
        ),
        migrations.CreateModel(
            name="CmsUrlconfrevision",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("revision", models.CharField(max_length=255)),
            ],
            options={"db_table": "cms_urlconfrevision", "managed": True},
        ),
        migrations.CreateModel(
            name="DjangocmsSnippetSnippet",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, unique=True)),
                ("html", models.TextField()),
                ("template", models.CharField(max_length=255)),
                ("slug", models.CharField(max_length=255, unique=True)),
            ],
            options={"db_table": "djangocms_snippet_snippet", "managed": True},
        ),
        migrations.CreateModel(
            name="DjangoContentType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("app_label", models.CharField(max_length=100)),
                ("model", models.CharField(max_length=100)),
            ],
            options={"db_table": "django_content_type", "managed": True, "unique_together": {("app_label", "model")}},
        ),
        migrations.CreateModel(
            name="DjangoSession",
            fields=[
                ("session_key", models.CharField(max_length=40, primary_key=True, serialize=False)),
                ("session_data", models.TextField()),
                ("expire_date", models.DateTimeField()),
            ],
            options={"db_table": "django_session", "managed": True},
        ),
        migrations.CreateModel(
            name="DjangoSite",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("domain", models.CharField(max_length=100, unique=True)),
                ("name", models.CharField(max_length=50)),
            ],
            options={"db_table": "django_site", "managed": True},
        ),
        migrations.CreateModel(
            name="EasyThumbnailsSource",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("storage_hash", models.CharField(max_length=40)),
                ("name", models.CharField(max_length=255)),
                ("modified", models.DateTimeField()),
            ],
            options={
                "db_table": "easy_thumbnails_source",
                "managed": True,
                "unique_together": {("storage_hash", "name")},
            },
        ),
        migrations.CreateModel(
            name="EasyThumbnailsThumbnail",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("storage_hash", models.CharField(max_length=40)),
                ("name", models.CharField(max_length=255)),
                ("modified", models.DateTimeField()),
                (
                    "source",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.EasyThumbnailsSource"),
                ),
            ],
            options={
                "db_table": "easy_thumbnails_thumbnail",
                "managed": True,
                "unique_together": {("storage_hash", "name", "source")},
            },
        ),
        migrations.CreateModel(
            name="FilerFile",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("file", models.CharField(blank=True, max_length=255, null=True)),
                ("field_file_size", models.BigIntegerField(blank=True, db_column="_file_size", null=True)),
                ("sha1", models.CharField(max_length=40)),
                ("has_all_mandatory_data", models.IntegerField()),
                ("original_filename", models.CharField(blank=True, max_length=255, null=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("uploaded_at", models.DateTimeField()),
                ("modified_at", models.DateTimeField()),
                ("is_public", models.IntegerField()),
            ],
            options={"db_table": "filer_file", "managed": True},
        ),
        migrations.CreateModel(
            name="FilerFolder",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255)),
                ("uploaded_at", models.DateTimeField()),
                ("created_at", models.DateTimeField()),
                ("modified_at", models.DateTimeField()),
                ("lft", models.PositiveIntegerField()),
                ("rght", models.PositiveIntegerField()),
                ("tree_id", models.PositiveIntegerField()),
                ("level", models.PositiveIntegerField()),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.AuthUser"
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.FilerFolder"
                    ),
                ),
            ],
            options={"db_table": "filer_folder", "managed": True, "unique_together": {("parent", "name")}},
        ),
        migrations.CreateModel(
            name="FilerThumbnailoption",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("width", models.IntegerField()),
                ("height", models.IntegerField()),
                ("crop", models.IntegerField()),
                ("upscale", models.IntegerField()),
            ],
            options={"db_table": "filer_thumbnailoption", "managed": True},
        ),
        migrations.CreateModel(
            name="LetsencryptAcmechallenge",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("challenge", models.CharField(max_length=255, unique=True)),
                ("response", models.CharField(max_length=255)),
            ],
            options={"db_table": "letsencrypt_acmechallenge", "managed": True},
        ),
        migrations.CreateModel(
            name="MenusCachekey",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("language", models.CharField(max_length=255)),
                ("site", models.PositiveIntegerField()),
                ("key", models.CharField(max_length=255)),
            ],
            options={"db_table": "menus_cachekey", "managed": True},
        ),
        migrations.CreateModel(
            name="MysiteDoor",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("is_open", models.IntegerField()),
                ("updated_at", models.DateTimeField()),
            ],
            options={"db_table": "mysite_door", "managed": True},
        ),
        migrations.CreateModel(
            name="MysitePi",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("ip", models.CharField(max_length=50)),
                ("updated_at", models.DateTimeField()),
            ],
            options={"db_table": "mysite_pi", "managed": True},
        ),
        migrations.CreateModel(
            name="MysiteToken",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("token", models.CharField(max_length=100)),
                ("device", models.CharField(max_length=50)),
            ],
            options={"db_table": "mysite_token", "managed": True},
        ),
        migrations.CreateModel(
            name="DjangocmsGooglemapGooglemap",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("zoom", models.PositiveSmallIntegerField()),
                ("lat", models.FloatField(blank=True, null=True)),
                ("lng", models.FloatField(blank=True, null=True)),
                ("width", models.CharField(max_length=6)),
                ("height", models.CharField(max_length=6)),
                ("scrollwheel", models.IntegerField()),
                ("double_click_zoom", models.IntegerField()),
                ("draggable", models.IntegerField()),
                ("keyboard_shortcuts", models.IntegerField()),
                ("pan_control", models.IntegerField()),
                ("zoom_control", models.IntegerField()),
                ("street_view_control", models.IntegerField()),
                ("style", models.TextField()),
                ("fullscreen_control", models.IntegerField()),
                ("map_type_control", models.CharField(max_length=255)),
                ("rotate_control", models.IntegerField()),
                ("scale_control", models.IntegerField()),
                ("template", models.CharField(max_length=255)),
            ],
            options={"db_table": "djangocms_googlemap_googlemap", "managed": True},
        ),
        migrations.CreateModel(
            name="DjangocmsGooglemapGooglemaproute",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("origin", models.CharField(max_length=255)),
                ("destination", models.CharField(max_length=255)),
                ("travel_mode", models.CharField(max_length=255)),
            ],
            options={"db_table": "djangocms_googlemap_googlemaproute", "managed": True},
        ),
        migrations.CreateModel(
            name="DjangocmsTextCkeditorText",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
                ("body", models.TextField()),
            ],
            options={"db_table": "djangocms_text_ckeditor_text", "managed": True},
        ),
        migrations.CreateModel(
            name="FilerImage",
            fields=[
                (
                    "file_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.FilerFile",
                    ),
                ),
                ("field_height", models.IntegerField(blank=True, db_column="_height", null=True)),
                ("field_width", models.IntegerField(blank=True, db_column="_width", null=True)),
                ("date_taken", models.DateTimeField(blank=True, null=True)),
                ("default_alt_text", models.CharField(blank=True, max_length=255, null=True)),
                ("default_caption", models.CharField(blank=True, max_length=255, null=True)),
                ("author", models.CharField(blank=True, max_length=255, null=True)),
                ("must_always_publish_author_credit", models.IntegerField()),
                ("must_always_publish_copyright", models.IntegerField()),
                ("subject_location", models.CharField(max_length=64)),
            ],
            options={"db_table": "filer_image", "managed": True},
        ),
        migrations.CreateModel(
            name="MysiteCard",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
                ("title_text", models.CharField(max_length=50)),
                ("content", models.TextField()),
                ("color_class", models.CharField(max_length=50)),
            ],
            options={"db_table": "mysite_card", "managed": True},
        ),
        migrations.CreateModel(
            name="MysiteCardimage",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
                ("title_text", models.CharField(max_length=50)),
                ("content", models.TextField()),
                ("image_url", models.CharField(max_length=100)),
                ("image_title", models.CharField(max_length=100)),
                ("color_class", models.CharField(max_length=50)),
            ],
            options={"db_table": "mysite_cardimage", "managed": True},
        ),
        migrations.CreateModel(
            name="MysiteCardimagelink",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
                ("title_text", models.CharField(max_length=50)),
                ("content", models.TextField()),
                ("image_url", models.CharField(max_length=100)),
                ("image_title", models.CharField(max_length=100)),
                ("color_class", models.CharField(max_length=50)),
                ("link_text", models.CharField(max_length=100)),
                ("link_destination", models.CharField(max_length=100)),
            ],
            options={"db_table": "mysite_cardimagelink", "managed": True},
        ),
        migrations.CreateModel(
            name="MysiteCardlink",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
                ("title_text", models.CharField(max_length=50)),
                ("content", models.TextField()),
                ("color_class", models.CharField(max_length=50)),
                ("link_text", models.CharField(max_length=100)),
                ("link_destination", models.CharField(max_length=100)),
            ],
            options={"db_table": "mysite_cardlink", "managed": True},
        ),
        migrations.CreateModel(
            name="MysiteColumnplugin",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
            ],
            options={"db_table": "mysite_columnplugin", "managed": True},
        ),
        migrations.CreateModel(
            name="MysiteFacebookeventsmodel",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
            ],
            options={"db_table": "mysite_facebookeventsmodel", "managed": True},
        ),
        migrations.CreateModel(
            name="MysiteFacebookgallerymodel",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
            ],
            options={"db_table": "mysite_facebookgallerymodel", "managed": True},
        ),
        migrations.CreateModel(
            name="MysiteParentplugin",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
            ],
            options={"db_table": "mysite_parentplugin", "managed": True},
        ),
        migrations.CreateModel(
            name="MysiteSlidermodel",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
            ],
            options={"db_table": "mysite_slidermodel", "managed": True},
        ),
        migrations.CreateModel(
            name="MysiteProfile",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("department", models.CharField(max_length=100)),
                ("nationality", models.CharField(max_length=100)),
                ("program", models.CharField(max_length=100)),
                ("card_number", models.CharField(max_length=25)),
                ("gender", models.CharField(max_length=10)),
                ("key_access", models.CharField(max_length=3)),
                ("member_type", models.CharField(max_length=50)),
                ("phone_nr", models.CharField(max_length=15)),
                ("tue_id", models.CharField(max_length=25)),
                ("user", models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.AuthUser")),
            ],
            options={"db_table": "mysite_profile", "managed": True},
        ),
        migrations.CreateModel(
            name="FilerFolderpermission",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("type", models.SmallIntegerField()),
                ("everybody", models.IntegerField()),
                ("can_edit", models.SmallIntegerField(blank=True, null=True)),
                ("can_read", models.SmallIntegerField(blank=True, null=True)),
                ("can_add_children", models.SmallIntegerField(blank=True, null=True)),
                (
                    "folder",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.FilerFolder"
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.AuthGroup"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.AuthUser"
                    ),
                ),
            ],
            options={"db_table": "filer_folderpermission", "managed": True},
        ),
        migrations.AddField(
            model_name="filerfile",
            name="folder",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.FilerFolder"
            ),
        ),
        migrations.AddField(
            model_name="filerfile",
            name="owner",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.AuthUser"
            ),
        ),
        migrations.AddField(
            model_name="filerfile",
            name="polymorphic_ctype",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.DjangoContentType"
            ),
        ),
        migrations.CreateModel(
            name="FilerClipboard",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.AuthUser")),
            ],
            options={"db_table": "filer_clipboard", "managed": True},
        ),
        migrations.CreateModel(
            name="EasyThumbnailsThumbnaildimensions",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("width", models.PositiveIntegerField(blank=True, null=True)),
                ("height", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "thumbnail",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.EasyThumbnailsThumbnail"
                    ),
                ),
            ],
            options={"db_table": "easy_thumbnails_thumbnaildimensions", "managed": True},
        ),
        migrations.CreateModel(
            name="DjangoAdminLog",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("action_time", models.DateTimeField()),
                ("object_id", models.TextField(blank=True, null=True)),
                ("object_repr", models.CharField(max_length=200)),
                ("action_flag", models.PositiveSmallIntegerField()),
                ("change_message", models.TextField()),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="legacy.DjangoContentType",
                    ),
                ),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.AuthUser")),
            ],
            options={"db_table": "django_admin_log", "managed": True},
        ),
        migrations.CreateModel(
            name="CmsUsersettings",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("language", models.CharField(max_length=10)),
                (
                    "clipboard",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="legacy.CmsPlaceholder",
                    ),
                ),
                ("user", models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.AuthUser")),
            ],
            options={"db_table": "cms_usersettings", "managed": True},
        ),
        migrations.CreateModel(
            name="CmsTreenode",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("path", models.CharField(max_length=255, unique=True)),
                ("depth", models.PositiveIntegerField()),
                ("numchild", models.PositiveIntegerField()),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.CmsTreenode"
                    ),
                ),
                ("site", models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.DjangoSite")),
            ],
            options={"db_table": "cms_treenode", "managed": True},
        ),
        migrations.CreateModel(
            name="CmsPagepermission",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("can_change", models.IntegerField()),
                ("can_add", models.IntegerField()),
                ("can_delete", models.IntegerField()),
                ("can_change_advanced_settings", models.IntegerField()),
                ("can_publish", models.IntegerField()),
                ("can_change_permissions", models.IntegerField()),
                ("can_move_page", models.IntegerField()),
                ("can_view", models.IntegerField()),
                ("grant_on", models.IntegerField()),
                (
                    "group",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.AuthGroup"
                    ),
                ),
                (
                    "page",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.CmsPage"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.AuthUser"
                    ),
                ),
            ],
            options={"db_table": "cms_pagepermission", "managed": True},
        ),
        migrations.AddField(
            model_name="cmspage",
            name="node",
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.CmsTreenode"),
        ),
        migrations.AddField(
            model_name="cmspage",
            name="publisher_public",
            field=models.OneToOneField(
                blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.CmsPage"
            ),
        ),
        migrations.CreateModel(
            name="CmsGlobalpagepermission",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("can_change", models.IntegerField()),
                ("can_add", models.IntegerField()),
                ("can_delete", models.IntegerField()),
                ("can_change_advanced_settings", models.IntegerField()),
                ("can_publish", models.IntegerField()),
                ("can_change_permissions", models.IntegerField()),
                ("can_move_page", models.IntegerField()),
                ("can_view", models.IntegerField()),
                ("can_recover_page", models.IntegerField()),
                (
                    "group",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.AuthGroup"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.AuthUser"
                    ),
                ),
            ],
            options={"db_table": "cms_globalpagepermission", "managed": True},
        ),
        migrations.AddField(
            model_name="cmscmsplugin",
            name="placeholder",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.CmsPlaceholder"
            ),
        ),
        migrations.CreateModel(
            name="DjangoRedirect",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("old_path", models.CharField(max_length=200)),
                ("new_path", models.CharField(max_length=200)),
                ("site", models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.DjangoSite")),
            ],
            options={"db_table": "django_redirect", "managed": True, "unique_together": {("site", "old_path")}},
        ),
        migrations.CreateModel(
            name="DjangocmsVideoVideotrack",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
                ("kind", models.CharField(max_length=255)),
                ("srclang", models.CharField(max_length=255)),
                ("label", models.CharField(max_length=255)),
                ("attributes", models.TextField()),
                (
                    "src",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.FilerFile"
                    ),
                ),
            ],
            options={"db_table": "djangocms_video_videotrack", "managed": True},
        ),
        migrations.CreateModel(
            name="DjangocmsVideoVideosource",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
                ("text_title", models.CharField(max_length=255)),
                ("text_description", models.TextField()),
                ("attributes", models.TextField()),
                (
                    "source_file",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.FilerFile"
                    ),
                ),
            ],
            options={"db_table": "djangocms_video_videosource", "managed": True},
        ),
        migrations.CreateModel(
            name="DjangocmsVideoVideoplayer",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
                ("embed_link", models.CharField(max_length=255)),
                ("attributes", models.TextField()),
                ("label", models.CharField(max_length=255)),
                ("template", models.CharField(max_length=255)),
                ("parameters", models.TextField()),
                (
                    "poster",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.FilerImage"
                    ),
                ),
            ],
            options={"db_table": "djangocms_video_videoplayer", "managed": True},
        ),
        migrations.CreateModel(
            name="DjangocmsSnippetSnippetptr",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
                (
                    "snippet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.DjangocmsSnippetSnippet"
                    ),
                ),
            ],
            options={"db_table": "djangocms_snippet_snippetptr", "managed": True},
        ),
        migrations.CreateModel(
            name="DjangocmsGooglemapGooglemapmarker",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("address", models.CharField(max_length=255)),
                ("lat", models.FloatField(blank=True, null=True)),
                ("lng", models.FloatField(blank=True, null=True)),
                ("show_content", models.IntegerField()),
                ("info_content", models.TextField()),
                (
                    "icon",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.FilerImage"
                    ),
                ),
            ],
            options={"db_table": "djangocms_googlemap_googlemapmarker", "managed": True},
        ),
        migrations.CreateModel(
            name="CmsTitle",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("language", models.CharField(max_length=15)),
                ("title", models.CharField(max_length=255)),
                ("page_title", models.CharField(blank=True, max_length=255, null=True)),
                ("menu_title", models.CharField(blank=True, max_length=255, null=True)),
                ("meta_description", models.TextField(blank=True, null=True)),
                ("slug", models.CharField(max_length=255)),
                ("path", models.CharField(max_length=255)),
                ("has_url_overwrite", models.IntegerField()),
                ("redirect", models.CharField(blank=True, max_length=2048, null=True)),
                ("creation_date", models.DateTimeField()),
                ("published", models.IntegerField()),
                ("publisher_is_draft", models.IntegerField()),
                ("publisher_state", models.SmallIntegerField()),
                ("page", models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.CmsPage")),
                (
                    "publisher_public",
                    models.OneToOneField(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.CmsTitle"
                    ),
                ),
            ],
            options={"db_table": "cms_title", "managed": True, "unique_together": {("language", "page")}},
        ),
        migrations.CreateModel(
            name="CmsStaticplaceholder",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255)),
                ("code", models.CharField(max_length=255)),
                ("dirty", models.IntegerField()),
                ("creation_method", models.CharField(max_length=20)),
                (
                    "draft",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="legacy.CmsPlaceholder",
                    ),
                ),
                (
                    "public",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="legacy.CmsPlaceholder",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.DjangoSite"
                    ),
                ),
            ],
            options={"db_table": "cms_staticplaceholder", "managed": True, "unique_together": {("code", "site")}},
        ),
        migrations.CreateModel(
            name="CmsPlaceholderreference",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "placeholder_ref",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="legacy.CmsPlaceholder",
                    ),
                ),
            ],
            options={"db_table": "cms_placeholderreference", "managed": True},
        ),
        migrations.CreateModel(
            name="CmsPageusergroup",
            fields=[
                (
                    "group_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.AuthGroup",
                    ),
                ),
                ("created_by", models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.AuthUser")),
            ],
            options={"db_table": "cms_pageusergroup", "managed": True},
        ),
        migrations.CreateModel(
            name="CmsPageuser",
            fields=[
                (
                    "user_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.AuthUser",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING, related_name="+", to="legacy.AuthUser"
                    ),
                ),
            ],
            options={"db_table": "cms_pageuser", "managed": True},
        ),
        migrations.AlterUniqueTogether(
            name="cmspage",
            unique_together={("node", "publisher_is_draft")},
        ),
        migrations.CreateModel(
            name="CmsAliaspluginmodel",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="legacy.CmsCmsplugin",
                    ),
                ),
                (
                    "alias_placeholder",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="legacy.CmsPlaceholder",
                    ),
                ),
                (
                    "plugin",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="legacy.CmsCmsplugin",
                    ),
                ),
            ],
            options={"db_table": "cms_aliaspluginmodel", "managed": True},
        ),
        migrations.CreateModel(
            name="AuthPermission",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255)),
                ("codename", models.CharField(max_length=100)),
                (
                    "content_type",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="legacy.DjangoContentType"),
                ),
            ],
            options={
                "db_table": "auth_permission",
                "managed": True,
                "unique_together": {("content_type", "codename")},
            },
        ),
    ]
